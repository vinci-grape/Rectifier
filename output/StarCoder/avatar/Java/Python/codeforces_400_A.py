import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.io.PrintWriter ; import java.util.Arrays ; public class codeforces_400_A { public static boolean isSolution ( int columnsCount, String x ) { boolean allXs [ ] = new boolean [ columnsCount ] ; Arrays.fill ( allXs, true ) ; for ( int i = 0 ; i < 12 ; i ++ ) { if ( x.charAt ( i )!= 'X' ) allXs [ i % columnsCount ] = false ; } for ( int i = 0 ; i < columnsCount ; i ++ ) if ( allXs [ i ] ) return true ; return false ; } public static void main ( String [ ] args ) throws IOException { BufferedReader br = new BufferedReader ( new InputStreamReader ( System.in ) ) ; PrintWriter pw = new PrintWriter ( System.out ) ; int t = Integer.parseInt ( br.readLine ( ) ) ; for ( int i = 0 ; i < t ; i ++ ) { int possibleSolutions = 0 ; StringBuilder solutions = new StringBuilder ( ) ; String s = br.readLine ( ) ; if ( isSolution ( 12, s ) ) { solutions.append ( " 1x12" ) ; possibleSolutions ++ ; } if ( isSolution ( 6, s ) ) { solutions.append ( " 2x6" ) ; possibleSolutions ++ ; } if ( isSolution ( 4, s ) ) { solutions.append ( " 3x4" ) ; possibleSolutions ++ ; } if ( isSolution ( 3, s ) ) { solutions.append ( " 4x3" ) ; possibleSolutions ++ ; } if ( isSolution ( 2, s ) ) { solutions.append ( " 6x2" ) ; possibleSolutions ++ ; } if ( isSolution ( 1, s ) ) { solutions.append ( " 12x1" ) ; possibleSolutions ++ ; } pw.print ( possibleSolutions ++ ) ; pw.println ( solutions ) ; } pw.flush ( ) ; pw.close ( ) ; } }