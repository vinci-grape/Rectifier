#include <bits/stdc++.h> using namespace std ; int main ( ) { int N ; cin >> N ; int u, v ; cin >> u >> v ; vector < int > [ ] edges = vector < int > [ N ] ( ) ; for ( int i = 0 ; i < N ; i ++ ) { edges [ i ] = vector < int > ( ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a, b ; cin >> a >> b ; a -- ; b -- ; edges [ a ].push_back ( b ) ; edges [ b ].push_back ( a ) ; } vector < int > d ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { d [ i ] = INT_MAX ; } d [ u ] = 0 ; dfs ( u, d, edges ) ; vector < int > e ( N ) ; for ( int i = 0 ; i < N ; i ++ ) { e [ i ] = INT_MAX ; } e [ v ] = 0 ; dfs ( v, e, edges ) ; int q = - 1 ; for ( int i = 0 ; i < N ; i ++ ) { if ( d [ i ] < e [ i ] ) { if ( e [ i ] > q ) { q = e [ i ] ; } } } if ( q <= 0 ) { cout << 0 << endl ; } else { cout << q - 1 << endl ; } } void dfs ( int u, vector < int > & d, vector < int > [ ] & edges ) { for ( auto nu : edges [ u ] ) { if ( d [ nu ] == INT_MAX ) { d [ nu ] = d [ u ] + 1 ; dfs ( nu, d, edges ) ; } } }